<!ENTITY filesParameter '
<param xmlns="http://wadl.dev.java.net/2009/02" name="files" style="plain" required="false" type="map" path="$.files">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      Supplies the contents of files referenced in the template or the
      environment. Stack templates and resource templates can explicitly
      reference files by using the <code>get_file</code> intrinsic function.
      In addition, the <code>environment</code> parameter can contain implicit
      references to files.
   </para>
   <para>
      The value is a JSON object, where each key is a relative or absolute URI
      which serves as the name of a file, and the associated value provides
      the contents of the file. The following code shows the general structure
      of this parameter.
   </para>
   <programlisting language="json">{ ...
    "files": {
        "fileA.yaml": "Contents of the file",
        "file:///usr/fileB.template": "Contents of the file",
        "http://example.com/fileC.template": "Contents of the file"
    }
... 
}</programlisting>
   <para>
      Additionally, some template authors encode their user data in a local
      file. The Orchestration client examines the template for the
      <code>get_file</code> intrinsic function and adds an entry to the
      <code>files</code> map with the path to the file as the name and the
      file contents as the value. So, a simple example looks like this:
   </para>
   <programlisting language="json">{
   "files": {
      "myfile": "#!/bin/bash\necho \"Hello world\" > /root/testfile.txt"
   },
   ...,
   "stack_name": "teststack",
   "template": {
      ...,
      "resources": {
         "my_server": {
            "type": "OS::Nova::Server",
            "properties": {
               ...,
               "user_data": {
                  "get_file": "myfile"
               }
            }
         }
      }
   },
   "timeout_mins": 60
}</programlisting>
   <para>
      Do not use this parameter to provide the content of the template located
      at the address specified by <code>template_url</code>. Instead, use the
      <code>template</code> parameter to supply the template content as part
      of the request.
   </para>
</wadl:doc>
</param> '>
<!ENTITY parametersParameter '
   <param xmlns="http://wadl.dev.java.net/2009/02" name="parameters" style="plain" required="false" type="object" path="$.parameters">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      Supplies arguments for parameters defined in the stack
      template.
   </para>
   <para>
      The value is a JSON object, where each key is the name of a parameter
      defined in the template and the associated value is the argument to use
      for that parameter when instantiating the template. The following code
      shows the general structure of this parameter. In the example,
      <code>a</code> and <code>b</code> would be the names of two parameters
      defined in the template.
   </para>
   <programlisting language="json">{ ...
    "parameters": {
        "a": "Value",
        "b": "3"
    }
... 
}</programlisting>
   <para>
      While the service accepts JSON numbers for parameters with the type
      <code>number</code> and JSON objects for parameters with the type
      <code>json</code>, all parameter values are converted to their string
      representation for storage in the created Stack. Clients are
      encouraged to send all parameter values using their string
      representation for consistency between requests and responses from the
      Orchestration service.
   </para>
   <para>
      A value must be provided for each template parameter which does not
      specify a default value. However, this parameter is not allowed to
      contain JSON properties with names that do not match a parameter
      defined in the template.
   </para>
   <para>
      The <code>files</code> parameter maps logical file names to file
      contents. Both the <code>get_file</code> intrinsic function and
      provider template functionality use this mapping. When you want to
      use a provider template, for example, the Orchestration service
      adds an entry to the <code>files</code> map by using:
   <itemizedlist>
   <listitem><para>The URL
      of the provider template as the name.</para></listitem>
   <listitem><para>The contents of that file as
      the value.</para></listitem>
   </itemizedlist>
   </para>
   <para>
      Additionally, some template authors encode their user data in a local
      file. The Orchestration client examines the template for the
      <code>get_file</code> intrinsic function and adds an entry to the
      <code>files</code> map with the path to the file as the name and the
      file contents as the value. So, a simple example looks like this:
   </para>
   <programlisting language="json">{
   "files": {
      "myfile": "#!/bin/bash\necho \"Hello world\" > /root/testfile.txt"
   },
   ...,
   "stack_name": "teststack",
   "template": {
      ...,
      "resources": {
         "my_server": {
            "type": "OS::Nova::Server",
            "properties": {
               ...,
               "user_data": {
                  "get_file": "myfile"
               }
            }
         }
      }
   },
   "timeout_mins": 60
}</programlisting>
</wadl:doc>
</param>'>
<!ENTITY sortKeys '
   <param xmlns="http://wadl.dev.java.net/2009/02" name="sort_keys" style="query" required="false">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      Sorts the list by the <code>resource_type</code> or
      <code>created_at</code> key.
   </para>
</wadl:doc>
</param> '>
<!ENTITY sortDirection '
   <param xmlns="http://wadl.dev.java.net/2009/02" name="sort_dir" style="query" required="false">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      The sort direction of the list. A valid value is
      <code>asc</code> (ascending) or <code>desc</code> (descending).
   </para>
</wadl:doc>
</param> '>
<!ENTITY templateUrlParameter '
<param xmlns="http://wadl.dev.java.net/2009/02" name="template_url" style="plain" required="false" path="$.template_url" type="string">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      A URI to the location containing the stack template
      on which to perform the specified operation.
   </para>
   <para>
      See the description of the <code>template</code>
      parameter for information about the expected template
      content located at the URI.
   </para>
   <para>
      This parameter is only required when you omit the
      <code>template</code> parameter. If you specify both parameters,
      this parameter is ignored.
   </para>
</wadl:doc>
</param>'>
<!ENTITY templateParameter '
<param xmlns="http://wadl.dev.java.net/2009/02" name="template" style="plain" required="false" type="string" path="$.template">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      The stack template on which to perform the specified operation.
   </para>
   <para>
      This parameter is always provided as a <code>string</code> in the JSON
      request body. The content of the string is a JSON- or YAML-formatted
      Orchestration template. For example:
   </para>
   <programlisting language="json">"template": {
    "heat_template_version": "2013-05-23",
    ...}</programlisting>
   <para>
      This parameter is required only when you omit the
      <code>template_url</code> parameter. If you specify both parameters,
      this value overrides the <code>template_url</code> parameter value.
   </para>
</wadl:doc>
</param>'>
<!ENTITY environmentParameter '
   <param xmlns="http://wadl.dev.java.net/2009/02" name="environment"
   style="plain" required="true" type="string" path="$.environment">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      A JSON environment for the stack.
   </para>
</wadl:doc>
</param>'>
<!ENTITY environmentParameterOptional '
   <param xmlns="http://wadl.dev.java.net/2009/02" name="environment" style="plain"
   required="false" type="string" path="$.environment">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      A JSON environment for the stack.
   </para>
</wadl:doc>
</param>'>
<!ENTITY tagsParameter '
<param xmlns="http://wadl.dev.java.net/2009/02" name="tags" style="plain" required="false">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      One or more simple string tags to associate with the stack. To associate
      multiple tags with a stack, separate the tags with commas. For example,
      <code>tag1,tag2</code>.
   </para>
</wadl:doc>
</param> '>
<!ENTITY paramNameNParameter '
<param xmlns="http://wadl.dev.java.net/2009/02" name="param_name-n" style="plain" required="true" type="string" path="$.parameters.param_name-n">
<wadl:doc xmlns="http://docbook.org/ns/docbook" xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      User-defined parameter names to pass to the template.
   </para>
</wadl:doc>
</param> '>
<!ENTITY paramNameNParameterOptional '
<param xmlns="http://wadl.dev.java.net/2009/02" name="param_name-n" style="plain" required="false" type="string" path="$.parameters.param_name-n">
<wadl:doc xmlns="http://docbook.org/ns/docbook" xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      User-defined parameter names to pass to the template.
   </para>
</wadl:doc>
</param> '>
<!ENTITY paramValueNParameter '
<param xmlns="http://wadl.dev.java.net/2009/02" name="param_value-n" style="plain" required="true" type="string" path="$.parameters.param_value-n">
<wadl:doc xmlns="http://docbook.org/ns/docbook" xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      User-defined parameter values to pass to the template.
   </para>
</wadl:doc>
</param> '>
<!ENTITY paramValueNParameterOptional '
<param xmlns="http://wadl.dev.java.net/2009/02" name="param_value-n" style="plain" required="false" type="string" path="$.parameters.param_value-n">
<wadl:doc xmlns="http://docbook.org/ns/docbook" xmlns:wadl="http://wadl.dev.java.net/2009/02"
   xml:lang="EN">
   <para>
      User-defined parameter values to pass to the template.
   </para>
</wadl:doc>
</param> '>
<!ENTITY commonFaults '
<response status="400" xmlns="http://wadl.dev.java.net/2009/02">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   title="Bad Request"
   xml:lang="EN" />
</response>
<response status="401" xmlns="http://wadl.dev.java.net/2009/02">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   title="Unauthorized"
   xml:lang="EN" />
</response> '>
<!ENTITY notFound '
<response status="404" xmlns="http://wadl.dev.java.net/2009/02">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   title="Not Found"
   xml:lang="EN" />
</response> '>
<!ENTITY conflict '
<response status="409" xmlns="http://wadl.dev.java.net/2009/02">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   title="Conflict"
   xml:lang="EN" />
</response> '>
<!ENTITY intServerErr '
<response status="500" xmlns="http://wadl.dev.java.net/2009/02">
<wadl:doc xmlns="http://docbook.org/ns/docbook"
   xmlns:wadl="http://wadl.dev.java.net/2009/02"
   title="Internal Server Error"
   xml:lang="EN" />
</response> '>
